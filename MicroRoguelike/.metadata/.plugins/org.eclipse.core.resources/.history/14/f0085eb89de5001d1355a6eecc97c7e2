package application;

import java.util.ArrayList;
import java.util.List;

public class Enemy extends GridEntity{

	private boolean isAlive;
	public Enemy(int X, int Y, char Char) {
		super(X, Y, Char);
		isAlive = true;
	}

	@Override
	public void Interact(int X, int Y) {
		if(!isAlive) return;//do nothing if this enemy is dead
		
		
		/*
		 * A Star Pathfinding Algorithm
		 * 
		 * Every time the player moves, this enemy will use A* to approach the player
		 */
		int PlayerX = GameManager.GetInstance().getPlayer().PosX;
		int PlayerY = GameManager.GetInstance().getPlayer().PosY;
		
		//Initialize Open and Closed lists
		List<AStarCell> openList = new ArrayList<AStarCell>();
		List<AStarCell> closedList = new ArrayList<AStarCell>();
		
		//Add starting cell to open list
		AStarCell start = new AStarCell(PosX,PosY);
		start.SetCosts(PosX, PosY, PlayerX, PlayerY);
		openList.add(new AStarCell(PosX,PosY));
		
		AStarCell Path = new AStarCell(PosX,PosY);
		boolean goalFound = false;
		
		while(!openList.isEmpty()&&!goalFound) {
			
			//Get the cell with the lowest FCost
			AStarCell CurrentNode = openList.get(0);
			for(int i = 0; i < openList.size();i++) {
				if(CurrentNode.GetFCost() > openList.get(i).GetFCost())
					CurrentNode = openList.get(i);
			}
			
			//move it to closed list
			openList.remove(CurrentNode);
			closedList.add(CurrentNode);
			
			if(CurrentNode.getX() == PlayerX && CurrentNode.getY() == PlayerY) {
				//This node is the goal
				Path = CurrentNode;
				goalFound = true;
				openList.clear();
			}
			else {
				//Generate Children
				AStarCell[] Children = new AStarCell[4];
				Children[0] = new AStarCell(CurrentNode.getX()+1,CurrentNode.getY());
				Children[1] = new AStarCell(CurrentNode.getX()-1,CurrentNode.getY());
				Children[2] = new AStarCell(CurrentNode.getX(),CurrentNode.getY()+1);
				Children[3] = new AStarCell(CurrentNode.getX(),CurrentNode.getY()-1);
				
				for(int i = 0; i < 4; i++) {
					Children[i].SetCosts(PosX, PosY, PlayerX, PlayerY);
					if(closedList.contains(Children[i])||openList.contains(Children[i])) {
						//do nothing
					}
					else{
						Children[i].SetPrevCell(CurrentNode);
						openList.add(Children[i]);
					}
				}
			}
		}
		//If a goal has been found, follow this process
		if(goalFound) {
			while(Path.GetPrevCell() != null && !Path.GetPrevCell().equals(start)) {
				Path = Path.GetPrevCell();
			}
		}
		
		SetPosition(Path.getX(),Path.getY());
		//Check for what do to
		if(PosX == X && PosY == Y) {
			//The enemy is at ontop of the player!
			if(GameManager.GetInstance().isSwordHeld()) {
				//die, you have been smited!
				isAlive = false;
				GameManager.GetInstance().removeSword();
				GameManager.GetInstance().addScore(250);
				GridChar = ' ';
				GUIManager.getInstance().DrawEntity(PosX, PosY, '?');//put the player's icon back on the grid because they survived.
			}
			else {
				//the player dies instead
				//simply load the gameover screen
				GUIManager.getInstance().setScene(GUIManager.getInstance().getGameOverScene());
			}
		}
	}
}
